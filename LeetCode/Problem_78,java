class Solution {
    
    //power set
    //you can use a dfs and add all elements and return when you reach length
    public List<List<Integer>> subsets(int[] nums) {
       // int nums[] = { 1, 2, 3 };
		List<List<Integer>> list = new ArrayList<List<Integer>>();

		int nSets = (int) Math.pow(2, nums.length);

		for (int i = 0; i < nSets; i++) {
			// each number corresponds to the
			int number = i;
			List<Integer> temp = new ArrayList<Integer>();
			
			int pos=0;
			while(number!=0)
			{
				int bit=number&1;//mask the right most bit
				if(bit==1)
				{
					temp.add(nums[pos]);
					
				}
				pos++;
				number=number>>1;
				
				
			}
			
			list.add(temp);

		}
        return list;
    }
}

//DFS solution
/*

class Solution {
    
    //power set
    //you can use a dfs and add all elements and return when you reach length
    
    
     List<List<Integer>> list = new ArrayList<List<Integer>>();
	
	public void DFS(int nums[],int left, List<Integer>temp)
	{
		list.add(new ArrayList<>(temp));
		
		if(left>=nums.length)
		{
			return;
		}
		else
		{
			for(int i=left;i<nums.length;i++)
			{
				temp.add(nums[i]);
				
				DFS(nums,i+1,temp);
				temp.remove(temp.size()-1);
				
			}
		}
		
	}

    public List<List<Integer>> subsets(int[] nums) {
       List<Integer> temp= new ArrayList<Integer>();
		DFS(nums,0,temp);
        return list;
    }
}


*/
